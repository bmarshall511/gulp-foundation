/// Helper mixin that generates font-face output.
///
/// @group typography
/// @author [Ben Marshall](https://benmarshall.me)
///
/// @param {String} $name The name of the font family
/// @param {String} $path Relative path from `src` to the font files.
/// @param {String} $weight [null] Font weight.
/// @param {String} $style [null] Font style.
/// @param {List} $exts [eot woff2 woff ttf svg] List of avaiable file extensions.
/// @output `@font-face` rule definitions.
///
/// @since 2.0.1
/// @access public
///
/// @example scss - Basic Usage Sass
///    @include font-face('Custom Font', '../fonts/CustomFont/CustomFont-Bold', 900, normal, eot woff ttf svg);
///
/// @example css - CSS Output
///    @font-face {
///      font-display: auto;
///      font-family: 'Custom Font';
///      font-style: normal;
///      font-weight: 900;
///      src: url("../fonts/CustomFont/CustomFont-Bold.eot") format("eot"),
///           url("../fonts/CustomFont/CustomFont-Bold.woff") format("woff"),
///           url("../fonts/CustomFont/CustomFont-Bold.woff") format("ttf"),
///           url("../fonts/CustomFont/CustomFont-Bold.woff") format("svg")
///    }
@mixin font-face($name, $path, $weight: null, $style: null, $exts: eot woff2 woff ttf svg) {
	$src: null;

	$extmods: (
		eot: "?",
		svg: "#" + str-replace($name, " ", "_")
	);

	$formats: (
		otf: "opentype",
		ttf: "truetype"
	);

	@each $ext in $exts {
		$extmod: if(map-has-key($extmods, $ext), $ext + map-get($extmods, $ext), $ext);
		$format: if(map-has-key($formats, $ext), map-get($formats, $ext), $ext);
		$src: append($src, url(quote($path + "." + $extmod)) format(quote($format)), comma);
	}

	@font-face {
    font-display: auto;
		font-family: quote($name);
		font-style: $style;
		font-weight: $weight;
		src: $src;
	}
}

@mixin icon-menu($size: $header-height, $line-height: 1, $icon-width: 25) {
  cursor: pointer;
  display: inline-block;
  height: $size;
  width: $size;

  span {
    margin-left: auto;
    margin-right: auto;
    position: relative;
    width: rem-calc($icon-width);
  }

  span,
  span::before,
  span::after {
    background-color: $white;
    display: block;
    height: rem-calc($line-height);
    transition: all $offcanvas-transition-length;
  }

  span::before,
  span::after {
    content: '';
    position: absolute;
    width: 100%;
  }

  span::before {
    margin-top: rem-calc($line-height * -7);
  }

  span::after {
    margin-top: rem-calc($line-height * 7);
  }
}

@mixin icon-menu-close {
  span {
    background-color: transparent;
  }

  span::before,
  span::after {
    margin-top: 0;
  }

  span::before {
    transform: rotate(45deg);
  }

  span::after {
    transform: rotate(-45deg);
  }
}
